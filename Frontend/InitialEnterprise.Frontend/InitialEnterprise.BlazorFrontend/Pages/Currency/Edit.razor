@page "/currency/edit/{Id}"

@inherits Component.ViewComponentBase

@using InitialEnterprise.BlazorFrontend.Controller
@using InitialEnterprise.Shared.Dtos


@inject CurrencyController Controller
@inject NavigationManager NavigationManager

<form class="ui form">
    <h4 class="ui dividing header"><i class="globe icon"></i> Edit Currency</h4>
    <div class="field">
        <label>Name</label>
        <div class="two fields">
            <div class="field @Error(nameof(Currency.Name))">
                <input type="text" @bind="@Currency.Name" placeholder="Name" />
            </div>
        </div>
    </div>
    <div class="field">
        <label>Iso Code</label>
        <div class="two fields">
            <div class="field @Error(nameof(Currency.IsoCode))">
                <input type="text" @bind="@Currency.IsoCode" placeholder="Iso Code" />
            </div>
        </div>
    </div>
</form>

<div class="ui small basic icon buttons">
    <button class="ui button" @onclick="@BackAction"><i class="reply icon"></i></button>
    <button class="ui button" @onclick="@SubmitAction"><i class="save icon"></i></button>
</div>


@code {
    [Parameter]
    public String Id { get; set; }

    CurrencyDto Currency = new CurrencyDto();

    protected override async Task OnInitializedAsync()
    {
        await FetchAction();
    }

    private Task FetchAction()
    {
        return TryRun(async () =>
        {
            this.Currency = await Controller.Fetch(Guid.Parse(Id));
        });
    }

    private Task SubmitAction()
    {
        return TryRun(async () =>
        {
            CommandHandlerAnswerDto<CurrencyDto> answer = await Controller.Save(Currency);
            this.Currency = answer.AggregateRoot == null ? Currency : answer.AggregateRoot;
            this.ValidationResult = answer.ValidationResult;
        });
    }

    private void BackAction()
    {
        NavigationManager.NavigateTo("/currency/list");
    }
}

