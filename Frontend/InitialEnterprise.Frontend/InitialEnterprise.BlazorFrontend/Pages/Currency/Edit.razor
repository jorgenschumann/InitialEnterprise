@page "/currency/edit/{Id}"

@inherits Component.ViewComponentBase

@using InitialEnterprise.BlazorFrontend.Controller
@using InitialEnterprise.Shared.Dtos
@using FluentValidation.Results

@inject CurrencyController Controller
@inject NavigationManager NavigationManager

<form class="ui form">
    <h4 class="ui dividing header"><i class="globe icon"></i> Edit Currency</h4>
    <div class="field">
        <label>Name</label>
        <div class="two fields">
            <div class="field @NameState">
                <input type="text" @bind="@currency.Name" placeholder="Name" />
            </div>
        </div>
    </div>
    <div class="field">
        <label>Iso Code</label>
        <div class="two fields">
            <div class="field @IsoCodeState)">
                <input type="text" @bind="@currency.IsoCode" placeholder="Iso Code" />
            </div>
        </div>
    </div>
</form>

<div class="ui small basic icon buttons">
    <button class="ui button" @onclick="@BackAction"><i class="reply icon"></i></button>
    <button class="ui button" @onclick="@SubmitAction"><i class="save icon"></i></button> 
</div>


@code {
    [Parameter]
    public String Id { get; set; }

    CurrencyDto currency = new CurrencyDto();

    String NameState = String.Empty;
    String IsoCodeState = String.Empty;
    ValidationResult validationResult = new ValidationResult();

    private Task FetchAction()
    {
        return TryRun(async () =>
        {
            this.currency = await Controller.Fetch(Guid.Parse(Id));
        });
    }

    private Task SubmitAction()
    {
        return TryRun(async () =>
        {
            CommandHandlerAnswerDto<CurrencyDto> answer = await Controller.Save(currency);
            {
                this.currency = answer.AggregateRoot;
                this.validationResult = answer.ValidationResult;
                this.ErrorState();
            }          
        });
    }

    private void BackAction()
    {
        NavigationManager.NavigateTo("/currency/list");
    }

    protected override async Task OnInitializedAsync()
    {
        this.currency = await Controller.Fetch(Guid.Parse(Id));
    }

    private void ErrorState()
    {
        if (this.validationResult != null)
        {
            if (this.validationResult.Errors.FirstOrDefault(e => e.PropertyName == "Name") != null)
            {
                NameState = "error";
            }
            if (this.validationResult.Errors.FirstOrDefault(e => e.PropertyName == "IsoCode") != null)
            {
                IsoCodeState = "error";
            }
        }   
    }
}

