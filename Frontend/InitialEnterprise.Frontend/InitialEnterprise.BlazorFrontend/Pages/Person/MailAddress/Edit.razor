@page "/person/{PersonId}/mailaddress/edit/{Id}"


@inherits Component.ViewComponentBase

@using InitialEnterprise.BlazorFrontend.Controller
@using InitialEnterprise.Shared.Dtos
@using FluentValidation.Results

@inject EmailAddressController Controller
@inject NavigationManager NavigationManager

<form class="ui form">
    <h4 class="ui dividing header"><i class="globe icon"></i>Edit Email</h4>
    <div class="field">
        <label>Mail</label>
        <div class="two fields">
            <div class="field">
                <input type="text" @bind="@EmailAddress.MailAddress" placeholder="MailAddress" />
            </div>
        </div>
    </div>
    <div class="field">
        <label>Iso Code</label>
        <div class="two fields">
            <div class="field)">
                <input type="text" @bind="@EmailAddress.MailAddressType" placeholder="MailAddressType" />
            </div>
        </div>
    </div>
    <div class="field">  
        <div class="two fields">
            <div class="ui field checked checkbox">
                <input type="checkbox" @bind="@EmailAddress.IsPrimary" placeholder="IsPrimary" />
                <label>Primary Mail</label>
            </div>         
        </div>
    </div>
</form>

<div class="ui small basic icon buttons">
    <button class="ui button" @onclick="@BackAction"><i class="reply icon"></i></button>
    <button class="ui button" @onclick="@SubmitAction"><i class="save icon"></i></button>
</div>

@code {
    [Parameter]
    public String PersonId { get; set; }

    [Parameter]
    public String Id { get; set; }

    EmailAddressDto EmailAddress = new EmailAddressDto();

    ValidationResult validationResult = new ValidationResult();

    protected override async Task OnInitializedAsync()
    {
        await FetchAction();
    }

    private Task FetchAction()
    {
        return TryRun(async () =>
        {
            this.EmailAddress =  await Controller.Get(Guid.Parse(PersonId), Guid.Parse(Id));
        });
    }

    private Task SubmitAction()
    {
        return TryRun(async () =>
        {
            CommandHandlerAnswerDto<EmailAddressDto> answer = await Controller.Save(EmailAddress);
            {
                this.EmailAddress = answer.AggregateRoot;
                this.validationResult = answer.ValidationResult;
            }
            if (answer.ValidationResult.IsValid)
            {
                BackAction();
            }
        });
    }

    private void BackAction()
    {
        NavigationManager.NavigateTo($"/person/edit/{this.PersonId}");
    }

    //private void ErrorState()
    //{
    //    if (this.validationResult != null)
    //    {
    //        if (this.validationResult.Errors.FirstOrDefault(e => e.PropertyName == "Name") != null)
    //        {
    //            NameState = "error";
    //        }
    //        if (this.validationResult.Errors.FirstOrDefault(e => e.PropertyName == "IsoCode") != null)
    //        {
    //            IsoCodeState = "error";
    //        }
    //    }
    //}
}

