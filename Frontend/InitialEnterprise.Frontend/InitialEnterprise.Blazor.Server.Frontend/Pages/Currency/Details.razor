@page "/currency/details/{Id}"

@inherits CurrencyDetailsView

@using InitialEnterprise.BlazorFrontend.Controller
@using InitialEnterprise.Shared.Dtos
@using InitialEnterprise.BlazorFrontend.Pages.Currency
@using Blazored.Modal
@using Blazored.Modal.Services

@inject IModalService ModalService
@inject CurrencyController Controller


<EditForm Model="Currency" OnValidSubmit="@SubmitAction" class="ui form">
        <DataAnnotationsValidator />  
        <h4 class="ui dividing header"><i class="globe icon"></i></h4>
        <div class="field">
            <label>Name</label>
            <div class="two fields">
                <div class="field @Error(nameof(Currency.Name))">
                    <input type="text" class="form-control" @bind="@Currency.Name" placeholder="Name" />
                    <ValidationMessage For="@(() => Currency.Name)" />
                </div>
            </div>
        </div>
        <div class="field">
            <label>Iso Code</label>
            <div class="two fields">
                <div class="field @Error(nameof(Currency.IsoCode))">
                    <input type="text" @bind="@Currency.IsoCode" placeholder="Iso Code" />
                    <ValidationMessage For="@(() => Currency.IsoCode)" />
                </div>
            </div>
        </div>
        <div class="ui small basic icon buttons">
            <button class="ui button" @onclick="@BackAction"><i class="reply icon"></i></button>
            <button type="submit" class="ui button"><i class="save icon"></i></button>
        </div>
    </EditForm>

@code {   

    protected override async Task OnInitializedAsync()
    {
        Controller.SetView(this);

        await FetchAction();
    }

    private Task FetchAction()
    {
        return TryRun(async () =>
        {
            await Controller.Fetch(Guid.Parse(Id));
        });
    }

    private Task SubmitAction(EditContext context)
    {
        return TryRun(async () =>
        {
            await Controller.Save(Currency, context, onSuccess: OkAction);
        });
    }

    private void OkAction()
    {
        ModalService.Close(ModalResult.Ok<CurrencyDto>(this.Currency));
    }

    private void BackAction()
    {
        ModalService.Close(ModalResult.Cancel());
    }
 }



