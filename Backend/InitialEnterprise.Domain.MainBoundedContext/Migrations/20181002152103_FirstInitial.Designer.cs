// <auto-generated />
using System;
using InitialEnterprise.Domain.MainBoundedContext.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InitialEnterprise.Domain.MainBoundedContext.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20181002152103_FirstInitial")]
    partial class FirstInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.CurrencyModule.Aggregate.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsoCode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.CurrencyModule.Aggregate.CurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AverageRate");

                    b.Property<Guid?>("CurrencyId");

                    b.Property<string>("CurrencyRateDate");

                    b.Property<string>("EndOfDayRate");

                    b.Property<string>("FromCurrencyCode");

                    b.Property<string>("ToCurrencyCode");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRate");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.PersonModule.Aggreate.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmailPromotion");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<bool>("NameStyle");

                    b.Property<string>("PersonType");

                    b.Property<string>("Suffix");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.CurrencyModule.Aggregate.CurrencyRate", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.CurrencyModule.Aggregate.Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationRoleClaim", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserClaim", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserLogin", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserRole", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUserToken", b =>
                {
                    b.HasOne("InitialEnterprise.Domain.MainBoundedContext.UserModule.Aggreate.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
